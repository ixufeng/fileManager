package handleLoad;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import file.Ffmpeg;
import file.MyFile;
import file.PicBreviary;

import sql.Dbconnect;
import sql.GetSql;

public class upload {
	HttpServletRequest request;
	Dbconnect db = null;
	// 存储路径
	final static String savePath = "G:/home";
	// 逻辑路径即所在的逻辑目录
	String logicPath;
	// 文件上传最大总量以及单个文件上传总量
	long maxSize = 1024 * 1024 * 10, fileMaxSize = 1024 * 1024;
	public String message = "";

	public upload(HttpServletRequest request, String logicPath, long maxSize,
			long fileMaxSize) {
		this.request = request;
		this.logicPath = logicPath;
		this.maxSize = maxSize;
		this.fileMaxSize = fileMaxSize;
	}

	public upload(HttpServletRequest request, String logicPath) {
		this.request = request;
		this.logicPath = logicPath;
	}

	// 生成缩略图
	public String getBreviary(String fileRandomName, String type) {
		String imgName = "fail";
		// 处理视频缩略图
		if (type.equals("avi") || type.equals("mp4")) {
			imgName = fileRandomName.substring(0,
					fileRandomName.lastIndexOf("."))
					+ "jpg";
			Ffmpeg.getPic(savePath + "\\" + fileRandomName, savePath + "\\"
					+ imgName);
		}
		if (type.equals("jpg")) {
			imgName = "Breviary" + fileRandomName;
			PicBreviary.getThumbnail(savePath + "\\" + fileRandomName, savePath
					+ "\\" + imgName, 60, 80);
		}
		return imgName;
	}

	// 检验文件类型是否符合上传规定
	public boolean cannotUpload(String forbid, String fileType) {
		if (fileType.equals(forbid))
			return false;
		return true;
	}

	// 文件存储到磁盘
	public void fileStorage(InputStream in, FileOutputStream out) {
		byte buffer[] = new byte[1024];
		int len;
		try {
			while ((len = in.read(buffer)) != -1) {
				out.write(buffer, 0, len);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 为文件获得唯一名字
	String getFileRandomName(String fileName) {
		return UUID.randomUUID().toString() + "_" + fileName;
	}

	// 进行数据库操作
	void updateDateBase(MyFile file) {
		// 将文件信息存储到数据库中
		String sql = GetSql.uploadSql(file.getFileRandomName(),
				file.getFileName(), logicPath, file.getFileType());
		// System.out.println(sql);
		db = new Dbconnect();
		if (db.getModify(sql) == 0)
			message = "fail to insert";
		db.closeState();
		db.closeCon();
	}

	// 存储FileItem
	void storageFileItem(FileItem item) {
		String fileName = "";
		if (item.isFormField())
			return;
		fileName = item.getName();
		// 对路径进行截断
		fileName = fileName.substring(fileName.lastIndexOf('\\') + 1);
		if (fileName == null || fileName.trim().equals("")) {
			message = "Fail";
			return;
		}
		String fileType = fileName.substring(fileName.lastIndexOf(".") + 1);
		// 将上传文件存储到file2中
		String fileRandomName = getFileRandomName(fileName);
		// 实际存储的位置
		String filePath = savePath + "\\" + fileRandomName;
		MyFile myFile = new MyFile(fileRandomName, fileName, logicPath,
				fileType);
		File file2 = new File(filePath);
		InputStream in;
		FileOutputStream out = null;
		try {
			out = new FileOutputStream(file2);
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}
		try {
			in = item.getInputStream();
			// 将文件存储到磁盘中
			fileStorage(in, out);
			in.close();
			out.close();

			// 生成缩略图
			if (getBreviary(fileRandomName, fileType).equals("fail")) {
				message = "Fail to get Breviary picture";
				return;
			}
			// 将文件信息存储到数据库中
			updateDateBase(myFile);
			// 清空FileItem对象中封装的主体内容，如果内容是被保存在临时文件中，该方法会把临时文件删除。
			item.delete();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// 对传过来的FileItem进行处理
	void upFile(List<FileItem> items) {
		for (FileItem item : items)
			storageFileItem(item);
	}

	// 设置文件上传 最大总量以及单个文件的大小
	void setSize(ServletFileUpload sfu, long maxSize, long fileMaxSize) {
		sfu.setSizeMax(maxSize);
		sfu.setFileSizeMax(fileMaxSize);
	}

	// 对前端传入的数据进行解析并存储
	public boolean doUpload() {
		// 创建上传目录
		File file = new File(savePath);
		if (!file.exists() && !file.isDirectory())
			file.mkdir();
		// 创建工厂类实例
		DiskFileItemFactory factory = new DiskFileItemFactory();
		// 创建一个解析器
		ServletFileUpload sfu = new ServletFileUpload(factory);
		// 设置文件大小上传限制
		setSize(sfu, maxSize, fileMaxSize);
		sfu.setHeaderEncoding("GBK");
		// 使用ServletFileUpload解析器解析上传数据，解析结果返回的是一个List<FileItem>集合，每一个FileItem对应一个Form表单的输入项
		try {
			System.out.println("1");
			List<FileItem> items = sfu.parseRequest(request);
			System.out.println("2");
			// 将解析的FileItem存储
			message = "ok";
			upFile(items);
			return true;

		} catch (FileUploadException e) {
			message = "fail";
			return false;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
}
